{"version":3,"file":"static/js/Catalog.45634836.chunk.js","mappings":"uSAkBMA,EAAUC,EAAAA,GAAAA,IAAH,6IASPC,EAAUD,EAAAA,GAAAA,IAAH,mJAOPE,EAAYF,EAAAA,GAAAA,IAAH,koBAQQG,EAAAA,EAAAA,MAAAA,MAYJA,EAAAA,EAAAA,MAAAA,OAIDA,EAAAA,EAAAA,OAAAA,SACOA,EAAAA,EAAAA,OAAAA,MAIAA,EAAAA,EAAAA,MAAAA,KAwFzB,UAhFA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,KACjB,GAA4BC,EAAAA,EAAAA,IAAYC,EAAAA,IAAjCC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,aACZ,GAAsEH,EAAAA,EAAAA,IAAYI,EAAAA,IAA3EC,EAAP,EAAOA,oBAAqBC,EAA5B,EAA4BA,YAAaC,EAAzC,EAAyCA,YAAaC,EAAtD,EAAsDA,aACtD,GAAwBR,EAAAA,EAAAA,IAAYS,EAAAA,IAA7BC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OACd,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAKMC,EAAiBC,EAAAA,YAAkBC,KAAS,SAACC,GAEjD,IAAMC,EAAoBd,EAAoBe,MAAK,SAACC,GAAD,OAAsBA,IAAaH,KAEtF,GAAY,IAARA,EAIJ,QAA0BI,IAAtBH,EAAiC,CACnC,IAAMI,EAAWlB,EAAoBmB,QAAO,SAACH,GAAD,OAAsBA,IAAaH,KAC/EpB,GAAS2B,EAAAA,EAAAA,IAAcF,SAEvBzB,GAAS2B,EAAAA,EAAAA,IAAc,GAAD,eAAKpB,GAAL,CAA0Ba,WAPhDpB,GAAS2B,EAAAA,EAAAA,IAAc,OASxB,KAAM,CAACpB,IAqCV,OAnCAW,EAAAA,WAAgB,WACd,IAAMX,EAAsBQ,EAAaa,IAAI,uBACvCC,EAAStB,EAAsBA,EAAoBuB,MAAM,KAAKC,KAAI,SAAAR,GAAQ,OAAIS,SAAST,MAAa,GACpGU,EAAmBlB,EAAaa,IAAI,eACpCM,EAA4BD,EAAmBD,SAASC,GAAoBzB,EAElFR,GAASmC,EAAAA,EAAAA,IAAW,CAClB3B,YAAa0B,EACb3B,oBAAqBsB,OAEtB,IAEHX,EAAAA,WAAgB,WACd,IAAMkB,EAAkB7B,EAAoB8B,OAAS,EAA7B,qBAA+C9B,EAA/C,KAAwE,GAC1F+B,EAAc7B,EAAW,kBAAcA,GAAgB,GACvD8B,EAAmB,CAACnC,IAAAA,EAAKgC,gBAAAA,EAAiBE,YAAAA,EAAajC,aAAAA,EAAcG,YAAAA,GACrEgC,EAA0B,CAACpC,IAAAA,EAAKgC,gBAAAA,EAAiBE,YAAAA,EAAajC,aAAAA,GAEpEL,GAASyC,EAAAA,EAAAA,IAAWF,IACpBvC,GAAS0C,EAAAA,EAAAA,IAAkBF,MAE1B,CAACjC,EAAqBE,EAAaD,IAEtCU,EAAAA,WAAgB,WACd,IAAMyB,EAGF,CACFnC,YAAa,UAAGA,IAAH,IACbD,oBAAqBA,EAAoB8B,OAAS,EAA7B,UAAoC9B,GAApC,IAGvBS,EAAgB2B,KACf,CAACnC,EAAaD,KAET,UAACZ,EAAD,YACN,UAACE,EAAD,YACE,SAAC,KAAD,KACA,SAAC,KAAD,CACE+C,iBAAkBrC,EAClBsC,gBA3DkB,SAACzB,GACvBH,EAAeG,MA4DD,UAAXP,GAAsB,SAACf,EAAD,WACrB,SAAC,IAAD,CAAMgD,KAAM,mGACG,gCACH,YAAXjC,IAAwB,SAAC,IAAD,KACzB,SAAC,KAAD,CAAWD,MAAOA,EAAOmC,QAAoB,YAAXlC,IACjCD,EAAMyB,OAAS,GAAK3B,EAAe,IAAM,SAAC,KAAD,CAAYL,aAAcA,WAGxE,SAAC,KAAD","sources":["pages/Catalog.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport {useSelector} from \"react-redux\";\nimport {useAppDispatch} from \"../redux/store\";\nimport {setCategories, setFilters, setSearchQuery} from \"../redux/slices/filterSlice\";\nimport {fetchGoods} from \"../redux/slices/goodsSlice\";\nimport {fetchCountOfPages} from \"../redux/slices/filterSlice\";\nimport {useSearchParams} from 'react-router-dom';\nimport {settingsSelector} from \"../redux/slices/settingsSlice\";\nimport {filterSelector} from \"../redux/slices/filterSlice\";\nimport {goodsSelector} from \"../redux/slices/goodsSlice\";\n\nimport {GoodsList, Footer, Categories, SearchLine, Pagination } from \"../components\";\nimport theme from \"../theme\";\nimport Logo from \"../elements/Logo\";\nimport {Loader} from \"../components/Loader\";\nimport debounce from \"lodash.debounce\";\n\nconst Catalog = styled.div`\n  padding-top: 130px;\n  height: 100vh;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\nconst Wrapper = styled.div`\n  height: max-content;\n  min-height: calc(100vh - 130px);\n  flex: 1;\n  margin: 0 0 100px 0;\n  padding: 0 var(--unit);\n`;\nconst ErrorInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: max-content;\n  margin: auto;\n  padding: 60px 0 120px 0;\n\n  @media (max-width: ${theme.media.tabMd}) {\n    position: relative;\n\n    order: 0;\n    margin: 20px auto;\n  }\n\n  span {\n    display: block;\n    width: auto;\n    padding: 0 70px;\n\n    font-family: ${theme.fonts.bebasB};\n    font-size: 80px;\n    color: white;\n\n    background: ${theme.colors.darkBlue};\n    border: 10px solid ${theme.colors.green};\n    box-shadow: 0 0 0 10px white;\n    transform: skew(-10deg) rotate(-10deg);\n\n    @media (max-width: ${theme.media.mob}) {\n      padding: 8px 8px 2px 8px;\n\n      font-size: 40px;\n    }\n  }\n`;\n\nfunction CatalogPage() {\n  const dispatch = useAppDispatch();\n  const {url, goodsPerPage} = useSelector(settingsSelector);\n  const {activeCategoriesIds, currentPage, searchQuery, countOfPages} = useSelector(filterSelector);\n  const {items, status} = useSelector(goodsSelector);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onClickCategory = (idx: number) => {\n    changeCategory(idx);\n  };\n  const changeCategory = React.useCallback(debounce((idx: number) => {\n\n    const isClickedCategory = activeCategoriesIds.find((category: number) => category === idx);\n\n    if (idx === 0) {\n      dispatch(setCategories([]));\n      return;\n    }\n    if (isClickedCategory !== undefined) {\n      const newArray = activeCategoriesIds.filter((category: number) => category !== idx);\n      dispatch(setCategories(newArray));\n    } else {\n      dispatch(setCategories([...activeCategoriesIds, idx]));\n    }\n  }, 200), [activeCategoriesIds])\n\n  React.useEffect(() => {\n    const activeCategoriesIds = searchParams.get('activeCategoriesIds');\n    const catIds = activeCategoriesIds ? activeCategoriesIds.split(',').map(category => parseInt(category)) : [];\n    const currentPageParam = searchParams.get('currentPage');\n    const currentPageResult: number = currentPageParam ? parseInt(currentPageParam) : currentPage;\n\n    dispatch(setFilters({\n      currentPage: currentPageResult,\n      activeCategoriesIds: catIds\n    }));\n  }, [])\n\n  React.useEffect(() => {\n    const queryCategories = activeCategoriesIds.length > 0 ? `&category=[${activeCategoriesIds}]` : \"\";\n    const querySearch = searchQuery ? `&search=${searchQuery}` : \"\";\n    const fetchGoodsParams = {url, queryCategories, querySearch, goodsPerPage, currentPage};\n    const fetchCountOfPagesParams = {url, queryCategories, querySearch, goodsPerPage};\n\n    dispatch(fetchGoods(fetchGoodsParams))\n    dispatch(fetchCountOfPages(fetchCountOfPagesParams))\n\n  }, [activeCategoriesIds, searchQuery, currentPage]);\n\n  React.useEffect(() => {\n    const params: {\n      currentPage: string,\n      activeCategoriesIds: string\n    } = {\n      currentPage: `${currentPage}` || `1`,\n      activeCategoriesIds: activeCategoriesIds.length > 0 ? `${activeCategoriesIds}` : ``\n    };\n\n    setSearchParams(params)\n  }, [currentPage, activeCategoriesIds]);\n\n  return (<Catalog>\n    <Wrapper>\n      <SearchLine/>\n      <Categories\n        activeCategories={activeCategoriesIds}\n        onClickCategory={onClickCategory}\n      />\n      {status === 'error' ? (<ErrorInfo>\n        <Logo text={'Произошла ошибка'}></Logo>\n      </ErrorInfo>) : (<>\n        {status === 'loading' && <Loader />}\n        <GoodsList items={items} loading={status === 'loading'}/>\n        {items.length > 0 && countOfPages > 1 && (<Pagination goodsPerPage={goodsPerPage}/>)}\n      </>)}\n    </Wrapper>\n    <Footer/>\n  </Catalog>);\n}\n\nexport default CatalogPage;\n"],"names":["Catalog","styled","Wrapper","ErrorInfo","theme","dispatch","useAppDispatch","useSelector","settingsSelector","url","goodsPerPage","filterSelector","activeCategoriesIds","currentPage","searchQuery","countOfPages","goodsSelector","items","status","useSearchParams","searchParams","setSearchParams","changeCategory","React","debounce","idx","isClickedCategory","find","category","undefined","newArray","filter","setCategories","get","catIds","split","map","parseInt","currentPageParam","currentPageResult","setFilters","queryCategories","length","querySearch","fetchGoodsParams","fetchCountOfPagesParams","fetchGoods","fetchCountOfPages","params","activeCategories","onClickCategory","text","loading"],"sourceRoot":""}