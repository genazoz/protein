{"version":3,"file":"static/js/Balls.c2b76927.chunk.js","mappings":"8UAUAA,EAAAA,EAAAA,GAAO,CAAEC,SAAAA,EAAAA,IAET,IAAMC,EAAMC,EAAAA,UAAAA,gBACNC,EAAiB,IAAID,EAAAA,eAAqB,EAAG,GAAI,IACjDE,EAAiB,IAAIF,EAAAA,qBAA2B,CACpDG,MAAO,OACPC,UAAW,IACXC,gBAAiB,GACjBC,SAAU,YAGNC,EAAUC,EAAAA,GAAAA,IAAH,iPAeT,SAACC,GAAD,OACAA,EAAMC,QAAN,0HAiGJ,EA1Fc,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACf,SAASC,EAAT,GAII,IAAD,IAHDC,IAAAA,OAGC,MAHK,IAAIZ,EAAAA,QAGT,MAFDa,IAAAA,OAEC,MAFK,IAAIb,EAAAA,QAET,EACD,IADC,aACkBc,EAAAA,EAAAA,KAAU,iBAAO,CAClCC,KAAM,CAAC,GACPC,KAAM,EACNC,eAAgB,GAChBC,cAAe,IACfC,SAAU,CAACpB,EAAI,IAAKA,EAAI,IAAKA,EAAI,UALnC,eAAOqB,EAAP,KAAYC,EAAZ,KAyBA,OAlBAC,EAAAA,EAAAA,IAAS,SAACC,GACR,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAEtBJ,EAAIK,QAAQC,YAAYF,EAAGZ,GAG3BS,EACGM,GAAGH,GACHI,WACCf,EACGgB,sBAAsBjB,GACtBkB,YACAC,gBAAgB,IAChBC,UACH,CAAC,EAAG,EAAG,QAKb,0BACEZ,IAAKA,EACLa,YAAU,EACVC,eAAa,EACbnB,KAAM,CAAC,KAAM,KAAM,IACnBoB,SAAUlC,EACVmC,SAAUlC,IAKhB,SAASmC,IACP,IAAMC,GAAWC,EAAAA,EAAAA,IAAS,SAAChB,GAAD,OAAWA,EAAMe,YAC3C,GAAgBxB,EAAAA,EAAAA,KAAU,iBAAO,CAC/B0B,KAAM,YACNzB,KAAM,CAAC,GACPI,SAAU,CAAC,EAAG,EAAG,OAHVE,GAAT,eAKA,OAAOC,EAAAA,EAAAA,IAAS,SAACC,GAAD,OACdF,EAAIF,SAASsB,IACVlB,EAAMmB,MAAMC,EAAIL,EAASM,MAAS,EAClCrB,EAAMmB,MAAMG,EAAIP,EAASQ,OAAU,EACpC,MAKN,OACE,SAACvC,EAAD,CAASG,OAAQA,EAAjB,UACE,UAAC,KAAD,CACEqC,SAAO,EACPC,IAAK,CAAC,EAAG,GACTC,OAAQ,CAAE9B,SAAU,CAAC,EAAG,EAAG,IAAK+B,IAAK,GAAIC,KAAM,EAAGC,IAAK,IAHzD,WAKE,yBAAcC,UAAW,OACzB,sBACEA,UAAW,EACXC,MAAO,GACPC,SAAU,EACVpC,SAAU,CAAC,GAAI,GAAI,IACnBc,YAAU,EACV,iBAAgB,CAAC,IAAK,QAExB,6BACEoB,UAAW,EACXlC,SAAU,EAAE,IAAK,IAAK,IACtBhB,MAAM,aAER,UAAC,KAAD,CAASqD,QAAS,CAAC,EAAG,EAAG,GAAIC,WAAY,GAAzC,WACE,SAACpB,EAAD,KACA,SAAC1B,EAAD,QAEF,SAAC+C,EAAA,GAAD,CAAaC,MAAOC","sources":["components/Balls/index.jsx"],"sourcesContent":["import * as THREE from \"three\";\nimport { Canvas, extend, useFrame, useThree } from \"@react-three/fiber\";\nimport { Physics, useSphere } from \"@react-three/cannon\";\nimport {\n  Environment,\n} from \"@react-three/drei\";\nimport { SSAOPass } from \"three-stdlib\";\nimport HdrFile from \"../../adamsbridge.hdr\";\nimport styled from \"styled-components\";\n\nextend({ SSAOPass });\n\nconst rfs = THREE.MathUtils.randFloatSpread;\nconst sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\nconst baubleMaterial = new THREE.MeshStandardMaterial({\n  color: \"#fff\",\n  roughness: 0.12,\n  envMapIntensity: 0.2,\n  emissive: \"#14132d\",\n});\n\nconst Wrapper = styled.div`\n  position: fixed;\n  z-index: 12;\n  top: 0;\n  right: 0;\n\n  width: 100vw;\n  height: 100vh;\n\n  opacity: 0;\n\n  transition: 0s opacity, 11s transform;\n  transition-delay: 0s;\n  pointer-events: none;\n\n  ${(props) =>\n    props.isShow &&\n    `opacity: 1;\n      transition: .5s opacity, 1s transform;\n      transition-delay: 1.5s;\n      pointer-events: all;`}\n`;\n\nconst Balls = ({ isShow }) => {\n  function Clump({\n    mat = new THREE.Matrix4(),\n    vec = new THREE.Vector3(),\n    ...props\n  }) {\n    const [ref, api] = useSphere(() => ({\n      args: [1],\n      mass: 1,\n      angularDamping: 0.1,\n      linearDamping: 0.65,\n      position: [rfs(20), rfs(20), rfs(20)],\n    }));\n    useFrame((state) => {\n      for (let i = 0; i < 40; i++) {\n        // Get current whereabouts of the instanced sphere\n        ref.current.getMatrixAt(i, mat);\n        // Normalize the position and multiply by a negative force.\n        // This is enough to drive it towards the center-point.\n        api\n          .at(i)\n          .applyForce(\n            vec\n              .setFromMatrixPosition(mat)\n              .normalize()\n              .multiplyScalar(-50)\n              .toArray(),\n            [0, 0, 0]\n          );\n      }\n    });\n    return (\n      <instancedMesh\n        ref={ref}\n        castShadow\n        receiveShadow\n        args={[null, null, 40]}\n        geometry={sphereGeometry}\n        material={baubleMaterial}\n      />\n    );\n  }\n\n  function Pointer() {\n    const viewport = useThree((state) => state.viewport);\n    const [, api] = useSphere(() => ({\n      type: \"Kinematic\",\n      args: [4],\n      position: [0, 0, 0],\n    }));\n    return useFrame((state) =>\n      api.position.set(\n        (state.mouse.x * viewport.width) / 2,\n        (state.mouse.y * viewport.height) / 2,\n        0\n      )\n    );\n  }\n\n  return (\n    <Wrapper isShow={isShow}>\n      <Canvas\n        shadows\n        dpr={[1, 2]}\n        camera={{ position: [0, 0, 15], fov: 35, near: 1, far: 40 }}\n      >\n        <ambientLight intensity={0.25} />\n        <spotLight\n          intensity={1}\n          angle={0.2}\n          penumbra={1}\n          position={[30, 30, 30]}\n          castShadow\n          shadow-mapSize={[512, 512]}\n        />\n        <directionalLight\n          intensity={5}\n          position={[-10, -10, -10]}\n          color=\"#1bbc9b\"\n        />\n        <Physics gravity={[0, 2, 0]} iterations={20}>\n          <Pointer />\n          <Clump />\n        </Physics>\n        <Environment files={HdrFile} />\n      </Canvas>\n    </Wrapper>\n  );\n}\n\nexport default Balls;"],"names":["extend","SSAOPass","rfs","THREE","sphereGeometry","baubleMaterial","color","roughness","envMapIntensity","emissive","Wrapper","styled","props","isShow","Clump","mat","vec","useSphere","args","mass","angularDamping","linearDamping","position","ref","api","useFrame","state","i","current","getMatrixAt","at","applyForce","setFromMatrixPosition","normalize","multiplyScalar","toArray","castShadow","receiveShadow","geometry","material","Pointer","viewport","useThree","type","set","mouse","x","width","y","height","shadows","dpr","camera","fov","near","far","intensity","angle","penumbra","gravity","iterations","Environment","files","HdrFile"],"sourceRoot":""}